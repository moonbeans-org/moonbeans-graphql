# This workflow will build and push a new container image to Amazon ECR,
# and then will deploy a new task definition to Amazon ECS, when there is a push to the "master" branch.
#
# To use this workflow, you will need to complete the following set-up steps:
#
# 1. Create an ECR repository to store your images.
#    For example: `aws ecr create-repository --repository-name my-ecr-repo --region us-east-2`.
#    Replace the value of the `ECR_REPOSITORY` environment variable in the workflow below with your repository's name.
#    Replace the value of the `AWS_REGION` environment variable in the workflow below with your repository's region.
#
# 2. Create an ECS task definition, an ECS cluster, and an ECS service.
#    For example, follow the Getting Started guide on the ECS console:
#      https://us-east-2.console.aws.amazon.com/ecs/home?region=us-east-2#/firstRun
#    Replace the value of the `ECS_SERVICE` environment variable in the workflow below with the name you set for the Amazon ECS service.
#    Replace the value of the `ECS_CLUSTER` environment variable in the workflow below with the name you set for the cluster.
#
# 3. Store your ECS task definition as a JSON file in your repository.
#    The format should follow the output of `aws ecs register-task-definition --generate-cli-skeleton`.
#    Replace the value of the `ECS_TASK_DEFINITION` environment variable in the workflow below with the path to the JSON file.
#    Replace the value of the `CONTAINER_NAME` environment variable in the workflow below with the name of the container
#    in the `containerDefinitions` section of the task definition.
#
# 4. Store an IAM user access key in GitHub Actions secrets named `AWS_ACCESS_KEY_ID` and `AWS_SECRET_ACCESS_KEY`.
#    See the documentation for each action used below for the recommended IAM policies for this IAM user,
#    and best practices on handling the access key credentials.

name: Deploy to Amazon ECS

on:
  push:
    branches: [ "master", "v2", "v2-devops"]

env:
  AWS_REGION: us-east-1
  ECS_CLUSTER: moonbeans
  
  WATCHER_ECS_TASK_DEFINITION: ./ecs-task-definition.json
  ECR_WATCHER_REPOSITORY: watcher
  ECS_WATCHER_SERVICE: watcher
  WATCHER_CONTAINER_NAME: watcher

  # ECR_HOLDER_REPOSITORY: holder
  # ECS_HOLDER_SERVICE: holder
  # HOLDER_CONTAINER_NAME: holder

  INDEXER_ECS_TASK_DEFINITION: ./chainIndexers/ecs-task-definition.json
  INDEXER_SERVICE: indexer

  ECR_MOONRIVER_REPOSITORY: moonriver
  MOONRIVER_CONTAINER_NAME: moonriver-indexer

  ECR_MOONBEAM_REPOSITORY: moonbeam
  MOONBEAM_CONTAINER_NAME: moonbeam-indexer
  
  DBHOST: ${{ secrets.DB_HOST }}
  DBNAME: ${{ secrets.DB_NAME }}
  DBUSER: ${{ secrets.DB_USER }}
  DBPASSWORD: ${{ secrets.DB_PASSWORD }}
  PINATA_TOKEN: ${{ secrets.PINATA_TOKEN }}
  JUSTCORS_TOKEN: ${{ secrets.JUSTCORS_TOKEN }}


permissions:
  contents: read

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}

      run: |
        # Environemnt setup for database access
        touch .env
        echo DBUSER=${DBUSER} >> .env
        echo DBPASS=${DBPASSWORD} >> .env
        echo DBHOST=${DBHOST} >> .env
        echo DBNAME=${DBNAME} >> .env
        echo USE_SSL=false >> .env
        echo PINATA_TOKEN=${PINATA_TOKEN} >> .env
        echo JUSTCORS_TOKEN=${JUSTCORS_TOKEN} >> .env

        # Build watcher container and push to ECR
        docker build -t $IMAGE_TAG .
        docker tag $IMAGE_TAG $ECR_REGISTRY/$ECR_WATCHER_REPOSITORY:$IMAGE_TAG
        docker tag $IMAGE_TAG $ECR_REGISTRY/$ECR_WATCHER_REPOSITORY:latest
        docker push $ECR_REGISTRY/$ECR_WATCHER_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_WATCHER_REPOSITORY:latest
        echo "watcher-image=$ECR_REGISTRY/$ECR_WATCHER_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

        # Build indexers and push to ECR
        cp .env chainIndexers/.env
        cd chainIndexers
        docker build --build-arg CHAIN_ARG=moonriver -t $IMAGE_TAG .
        docker tag $IMAGE_TAG $ECR_REGISTRY/$ECR_MOONRIVER_REPOSITORY:$IMAGE_TAG
        docker tag $IMAGE_TAG $ECR_REGISTRY/$ECR_MOONRIVER_REPOSITORY:latest
        docker push $ECR_REGISTRY/$ECR_MOONRIVER_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_MOONRIVER_REPOSITORY:latest
        echo "moonriver-image=$ECR_REGISTRY/$ECR_MOONRIVER_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

        docker build --build-arg CHAIN_ARG=moonbeam -t $IMAGE_TAG .
        docker tag $IMAGE_TAG $ECR_REGISTRY/$ECR_MOONBEAM_REPOSITORY:$IMAGE_TAG
        docker tag $IMAGE_TAG $ECR_REGISTRY/$ECR_MOONBEAM_REPOSITORY:latest
        docker push $ECR_REGISTRY/$ECR_MOONBEAM_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_MOONBEAM_REPOSITORY:latest
        echo "moonbeam-image=$ECR_REGISTRY/$ECR_MOONBEAM_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT


    - name: Fill in the new image ID for the Watcher task definition
      id: watcher-task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ${{ env.WATCHER_ECS_TASK_DEFINITION }}
        container-name: ${{ env.WATCHER_CONTAINER_NAME }}
        image: ${{ steps.build-image.outputs.watcher-image }}

    - name: Deploy Watcher Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.watcher-task-def.outputs.task-definition }}
        service: ${{ env.ECS_WATCHER_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true

    - name: Fill in the new image ID for the Moonriver Indexer task definition
      id: indexer-task-def-1
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ${{ env.INDEXER_ECS_TASK_DEFINITION }}
        container-name: ${{ env.MOONRIVER_CONTAINER_NAME }}
        image: ${{ steps.build-image.outputs.moonriver-image }}

    - name: Fill in the new image ID for the Moonbeam Indexer task definition
      id: indexer-task-def-2
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ${{ steps.indexer-task-def-1.outputs.task-definition }}
        container-name: ${{ env.MOONBEAM_CONTAINER_NAME }}
        image: ${{ steps.build-image.outputs.moonbeam-image }}

    - name: Deploy Indexer Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.indexer-task-def-2.outputs.task-definition }}
        service: ${{ env.ECS_INDEXER_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: false